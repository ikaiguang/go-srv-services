// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: api/snowflake-service/v1/services/snowflake.service.v1.proto

package snowflakeservicev1

import (
	context "context"
	resources "github.com/ikaiguang/go-srv-services/api/snowflake-service/v1/resources"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SrvSnowflakeNodeID_GetNodeId_FullMethodName    = "/service.api.snowflakeservicev1.SrvSnowflakeNodeID/GetNodeId"
	SrvSnowflakeNodeID_ExtendNodeId_FullMethodName = "/service.api.snowflakeservicev1.SrvSnowflakeNodeID/ExtendNodeId"
)

// SrvSnowflakeNodeIDClient is the client API for SrvSnowflakeNodeID service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SrvSnowflakeNodeIDClient interface {
	GetNodeId(ctx context.Context, in *resources.GetNodeIdReq, opts ...grpc.CallOption) (*resources.SnowflakeNodeID, error)
	ExtendNodeId(ctx context.Context, in *resources.ExtendNodeIdReq, opts ...grpc.CallOption) (*resources.ExtendNodeIdResp, error)
}

type srvSnowflakeNodeIDClient struct {
	cc grpc.ClientConnInterface
}

func NewSrvSnowflakeNodeIDClient(cc grpc.ClientConnInterface) SrvSnowflakeNodeIDClient {
	return &srvSnowflakeNodeIDClient{cc}
}

func (c *srvSnowflakeNodeIDClient) GetNodeId(ctx context.Context, in *resources.GetNodeIdReq, opts ...grpc.CallOption) (*resources.SnowflakeNodeID, error) {
	out := new(resources.SnowflakeNodeID)
	err := c.cc.Invoke(ctx, SrvSnowflakeNodeID_GetNodeId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvSnowflakeNodeIDClient) ExtendNodeId(ctx context.Context, in *resources.ExtendNodeIdReq, opts ...grpc.CallOption) (*resources.ExtendNodeIdResp, error) {
	out := new(resources.ExtendNodeIdResp)
	err := c.cc.Invoke(ctx, SrvSnowflakeNodeID_ExtendNodeId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SrvSnowflakeNodeIDServer is the server API for SrvSnowflakeNodeID service.
// All implementations must embed UnimplementedSrvSnowflakeNodeIDServer
// for forward compatibility
type SrvSnowflakeNodeIDServer interface {
	GetNodeId(context.Context, *resources.GetNodeIdReq) (*resources.SnowflakeNodeID, error)
	ExtendNodeId(context.Context, *resources.ExtendNodeIdReq) (*resources.ExtendNodeIdResp, error)
	mustEmbedUnimplementedSrvSnowflakeNodeIDServer()
}

// UnimplementedSrvSnowflakeNodeIDServer must be embedded to have forward compatible implementations.
type UnimplementedSrvSnowflakeNodeIDServer struct {
}

func (UnimplementedSrvSnowflakeNodeIDServer) GetNodeId(context.Context, *resources.GetNodeIdReq) (*resources.SnowflakeNodeID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeId not implemented")
}
func (UnimplementedSrvSnowflakeNodeIDServer) ExtendNodeId(context.Context, *resources.ExtendNodeIdReq) (*resources.ExtendNodeIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtendNodeId not implemented")
}
func (UnimplementedSrvSnowflakeNodeIDServer) mustEmbedUnimplementedSrvSnowflakeNodeIDServer() {}

// UnsafeSrvSnowflakeNodeIDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SrvSnowflakeNodeIDServer will
// result in compilation errors.
type UnsafeSrvSnowflakeNodeIDServer interface {
	mustEmbedUnimplementedSrvSnowflakeNodeIDServer()
}

func RegisterSrvSnowflakeNodeIDServer(s grpc.ServiceRegistrar, srv SrvSnowflakeNodeIDServer) {
	s.RegisterService(&SrvSnowflakeNodeID_ServiceDesc, srv)
}

func _SrvSnowflakeNodeID_GetNodeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.GetNodeIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvSnowflakeNodeIDServer).GetNodeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvSnowflakeNodeID_GetNodeId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvSnowflakeNodeIDServer).GetNodeId(ctx, req.(*resources.GetNodeIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvSnowflakeNodeID_ExtendNodeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ExtendNodeIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvSnowflakeNodeIDServer).ExtendNodeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvSnowflakeNodeID_ExtendNodeId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvSnowflakeNodeIDServer).ExtendNodeId(ctx, req.(*resources.ExtendNodeIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SrvSnowflakeNodeID_ServiceDesc is the grpc.ServiceDesc for SrvSnowflakeNodeID service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SrvSnowflakeNodeID_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.api.snowflakeservicev1.SrvSnowflakeNodeID",
	HandlerType: (*SrvSnowflakeNodeIDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeId",
			Handler:    _SrvSnowflakeNodeID_GetNodeId_Handler,
		},
		{
			MethodName: "ExtendNodeId",
			Handler:    _SrvSnowflakeNodeID_ExtendNodeId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/snowflake-service/v1/services/snowflake.service.v1.proto",
}
