// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.21.12
// source: api/snowflake-service/v1/services/snowflake.service.v1.proto

package snowflakeservicev1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	resources "github.com/ikaiguang/go-srv-services/api/snowflake-service/v1/resources"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSrvSnowflakeNodeIDExtendNodeId = "/service.api.snowflakeservicev1.SrvSnowflakeNodeID/ExtendNodeId"
const OperationSrvSnowflakeNodeIDGetNodeId = "/service.api.snowflakeservicev1.SrvSnowflakeNodeID/GetNodeId"

type SrvSnowflakeNodeIDHTTPServer interface {
	ExtendNodeId(context.Context, *resources.ExtendNodeIdReq) (*resources.ExtendNodeIdResp, error)
	GetNodeId(context.Context, *resources.GetNodeIdReq) (*resources.SnowflakeNodeID, error)
}

func RegisterSrvSnowflakeNodeIDHTTPServer(s *http.Server, srv SrvSnowflakeNodeIDHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/snowflake/nodeid/get", _SrvSnowflakeNodeID_GetNodeId0_HTTP_Handler(srv))
	r.POST("/api/v1/snowflake/nodeid/extend", _SrvSnowflakeNodeID_ExtendNodeId0_HTTP_Handler(srv))
}

func _SrvSnowflakeNodeID_GetNodeId0_HTTP_Handler(srv SrvSnowflakeNodeIDHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.GetNodeIdReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvSnowflakeNodeIDGetNodeId)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNodeId(ctx, req.(*resources.GetNodeIdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.SnowflakeNodeID)
		return ctx.Result(200, reply)
	}
}

func _SrvSnowflakeNodeID_ExtendNodeId0_HTTP_Handler(srv SrvSnowflakeNodeIDHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.ExtendNodeIdReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvSnowflakeNodeIDExtendNodeId)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExtendNodeId(ctx, req.(*resources.ExtendNodeIdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.ExtendNodeIdResp)
		return ctx.Result(200, reply)
	}
}

type SrvSnowflakeNodeIDHTTPClient interface {
	ExtendNodeId(ctx context.Context, req *resources.ExtendNodeIdReq, opts ...http.CallOption) (rsp *resources.ExtendNodeIdResp, err error)
	GetNodeId(ctx context.Context, req *resources.GetNodeIdReq, opts ...http.CallOption) (rsp *resources.SnowflakeNodeID, err error)
}

type SrvSnowflakeNodeIDHTTPClientImpl struct {
	cc *http.Client
}

func NewSrvSnowflakeNodeIDHTTPClient(client *http.Client) SrvSnowflakeNodeIDHTTPClient {
	return &SrvSnowflakeNodeIDHTTPClientImpl{client}
}

func (c *SrvSnowflakeNodeIDHTTPClientImpl) ExtendNodeId(ctx context.Context, in *resources.ExtendNodeIdReq, opts ...http.CallOption) (*resources.ExtendNodeIdResp, error) {
	var out resources.ExtendNodeIdResp
	pattern := "/api/v1/snowflake/nodeid/extend"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvSnowflakeNodeIDExtendNodeId))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvSnowflakeNodeIDHTTPClientImpl) GetNodeId(ctx context.Context, in *resources.GetNodeIdReq, opts ...http.CallOption) (*resources.SnowflakeNodeID, error) {
	var out resources.SnowflakeNodeID
	pattern := "/api/v1/snowflake/nodeid/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvSnowflakeNodeIDGetNodeId))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
